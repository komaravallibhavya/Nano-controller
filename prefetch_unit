initialo_wb_cyc <= 1'b0;
initialo_wb_stb <= 1'b0;
initialo_valid <= 1'b0;
always @(posedge i_clk)
if (i_reset)
o_wb_cyc <= 1'b0;
o_wb_stb <= 1'b0;
o_valid <= 1'b0;
end else if (!o_wb_cyc)
begin
if ((i_new_pc)||((o_valid)&&(i_stall_n)))
begin
o_wb_cyc <= 1'b1;
o_wb_stb <= 1'b1;
if (i_new_pc)
 o_wb_addr <= i_pc;
else if ((o_valid)&&(i_stall_n))
 o_wb_addr <= o_wb_addr+1'b1;
o_valid <= 1'b0;
end
end else begin // if (o_wb_cyc)
if (!i_wb_stall)
o_wb_stb <= 1'b0;
if (i_wb_ack)
begin
o_wb_cyc <= 1'b0;
o_insn <= i_wb_data;
o_valid <= 1'b1;
end
end
actual prefetch code
assign o_wb_we = 1'b0;
assign o_wb_data = 32'h0000;
initialo_wb_cyc = 1'b0;
initialo_wb_stb = 1'b0;
always @(posedge i_clk)
if ((i_reset)||((o_wb_cyc)&&((i_wb_ack)||(i_wb_err))))
begin
// End any bus cycle on a reset, or a return ACK
// or error.
o_wb_cyc <= 1'b0;
o_wb_stb <= 1'b0;
end else if ((!o_wb_cyc)&&(
// 1.
((i_stalled_n)&&(!o_illegal))
// 2.
||(invalid)
// 3.
||(i_new_pc)))
begin
// Initiate a bus transaction
o_wb_cyc <= 1'b1;
o_wb_stb <= 1'b1;
end else if (o_wb_cyc)
begin
if (!i_wb_stall)
o_wb_stb <= 1'b0;
if (i_new_pc)
begin
o_wb_cyc <= 1'b0;
o_wb_stb <= 1'b0;
end
end
initialinvalid = 1'b0;
always @(posedge i_clk)
if ((i_reset)||(!o_wb_cyc))
invalid <= 1'b0;
else if (i_new_pc)
invalid <= 1'b1;
initialo_wb_addr= 0;
always @(posedge i_clk)
if (i_new_pc)
o_wb_addr <= i_pc;
else if ((o_valid)&&(i_stalled_n)&&(!o_illegal))
o_wb_addr <= o_wb_addr + 1'b1;
assign o_pc = o_wb_addr;
always @(posedge i_clk)
if ((o_wb_cyc)&&(i_wb_ack))
o_insn <= i_wb_data;
initial o_valid = 1'b0;
initial o_illegal = 1'b0;
always @(posedge i_clk)
if ((i_reset)||(i_new_pc)||(i_clear_cache))
begin
// ....
o_valid <= 1'b0;
o_illegal <= 1'b0; end else if 
((o_wb_cyc)&&((i_wb_ack)||(i_wb_err)))
begin
// ...
o_valid <= 1'b1;
o_illegal <= ( i_wb_err); end else if (i_stalled_n)
begin
// ---
o_valid <= 1'b0; end
formula verification
initial`ASSUME(i_reset); always @(posedge i_clk)
if ((f_past_valid)&&($past(i_reset)))
`ASSUME(i_new_pc); always @(posedge i_clk)
if ((f_past_valid)&&($past(i_clear_cache)))
`ASSUME(i_new_pc); always @(posedge i_clk)
if ((f_past_valid)&&($past(i_reset)))
`ASSUME(i_stalled_n); always @(posedge i_clk)
if ((f_past_valid)&&($past(!o_valid))&&($past(i_stalled_n)))
`ASSUME(i_stalled_n); localparam F_CPU_DELAY = 
4; always @(posedge i_clk)
// If no instruction is ready, then keep our counter at zero
if ((i_reset)||(!o_valid)||(i_stalled_n))
f_cpu_delay <= 0;
else
// Otherwise, count the clocks the CPU takes to 
respond
f_cpu_delay <= f_cpu_delay + 1'b1; always @(posedge 
i_clk)
assume(f_cpu_delay < F_CPU_DELAY); fwb_master 
#(.AW(AW), .DW(DW),.F_LGDEPTH(F_LGDEPTH),
.F_MAX_REQUESTS(1), .F_OPT_SOURCE(1),
.F_OPT_RMW_BUS_OPTION(0),
.F_OPT_DISCONTINUOUS(0))
f_wbm(i_clk, i_reset,
o_wb_cyc, o_wb_stb, o_wb_we, o_wb_addr, o_wb_data, 
4'h0,
i_wb_ack, i_wb_stall, i_wb_data, i_wb_err,
f_nreqs, f_nacks, f_outstanding); always @(posedge 
i_clk)
if (o_wb_stb)
assert(!o_wb_we); always @(posedge i_clk)
if ((f_past_valid)&&($past(f_past_valid))
&&($past(i_clear_cache,2))
&&($past(o_wb_cyc,2)))
// ...
assert((!$past(o_wb_cyc))||(!o_wb_cyc)); always 
@(posedge i_clk)
if ((f_past_valid)&&($past(o_valid))&&(o_valid))
assert($stable(o_wb_addr)); always @(posedge i_clk)
if ((f_past_valid)&&($past(!i_reset))&&($past(invalid)))
assert(o_wb_cyc); always @(posedge i_clk)
if ((f_past_valid)&&($past(o_valid))&&($past(i_stalled_n)))
assert(!o_valid); always @(*)
if (o_wb_cyc)
assert(!o_valid); always @(posedge i_clk)
if ((f_past_valid)&&(!$past(i_reset))
&&($past(o_wb_cyc))
&&($past(!i_clear_cache))
&&($past(i_wb_ack))&&(!$past(i_wb_err)))
begin
if (!invalid)
assert(o_valid);
endalways @(posedge i_clk)
if ((f_past_valid)&&($past(i_clear_cache)))
assert(!o_valid); always @(posedge i_clk)
if ((f_past_valid)&&($past(f_past_valid))
&&($past(i_clear_cache,2))
&&($past(o_wb_cyc,2)))
// ...
assert(!o_valid); always @(posedge i_clk)
if ((f_past_valid)&&(!$past(i_reset))
&&(!$past(i_new_pc))&&(!$past(i_clear_cache))
&&($past(o_valid))&&(!$past(i_stalled_n)))
assert($stable(o_valid)); always @(posedge i_clk)
if ((f_past_valid)&&($past(o_valid))&&(o_valid))
begin
assert($stable(o_pc));
assert($stable(o_insn));
assert($stable(o_illegal));
endalways @(posedge i_clk)
if ((f_past_valid)&&(!$past(i_reset))
&&(!$past(i_new_pc))&&(!$past(i_clear_cache))
&&($past(!o_wb_cyc)))
assert($stable(o_illegal)); initial f_last_pc_valid = 1'b0;
always @(posedge i_clk)
if ((i_reset)||(i_clear_cache)||(i_new_pc)||(invalid))
f_last_pc_valid <= 1'b0;
else if (o_valid)
f_last_pc_valid <= (!o_illegal); always @(posedge i_clk)
if (o_valid)
f_last_pc <= o_pc; else if (f_last_pc_valid)
assert(o_pc == f_last_pc + 1'b1); always @(posedge 
i_clk)
if ((f_past_valid)&&(o_valid)
&&(!$past(o_valid))&&(f_last_pc_valid))
assert(o_pc == (f_last_pc + 1'b1)); initial f_req_addr 
= 0;
always @(posedge i_clk)
if (i_new_pc)
f_req_addr <= i_pc;
else if ((!invalid)&&(o_wb_cyc)&&(i_wb_ack)&&(!i_wb_err))
f_req_addr <= f_req_addr + 1'b1; always @(posedge 
i_clk)
if (o_wb_cyc)
assert((invalid)||(f_req_addr == o_wb_addr)); else if 
((!o_valid)&&(!i_new_pc)&&(!i_reset))
assert(f_req_addr == o_wb_addr); always @(posedge 
i_clk)
if ((f_past_valid)&&($past(invalid)))
assert(!invalid);
`end
endmodule
